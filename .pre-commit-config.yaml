# .pre-commit-config.yaml - Pre-commit hooks for GstStudio
# Ensures code quality and consistency before commits

default_stages: [commit]
fail_fast: false

repos:
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '^Generated/.*'
      - id: end-of-file-fixer
        exclude: '^Generated/.*'
      - id: check-yaml
        args: ['--unsafe']  # Allow custom YAML tags
      - id: check-xml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: ['--fix=lf']

  # C++ formatting with clang-format
  - repo: https://github.com/pre-commit/mirrors-clang-format
    rev: v17.0.6
    hooks:
      - id: clang-format
        files: \.(cpp|h|hpp|c|cc|cxx)$
        exclude: '^Generated/.*'
        args: ['-i', '--style=file']

  # C++ static analysis with clang-tidy
  - repo: https://github.com/pocc/pre-commit-hooks
    rev: v1.3.5
    hooks:
      - id: clang-tidy
        files: \.(cpp|cc|cxx)$
        exclude: '^Generated/.*'
        args:
          - --config-file=.clang-tidy
          - --header-filter=.*
        additional_dependencies:
          - clang-tidy
        # Only run on files that have changed
        stages: [commit]

  # QML formatting (if qmlformat is available)
  - repo: local
    hooks:
      - id: qml-format
        name: QML Format
        entry: bash -c 'if command -v qmlformat &> /dev/null; then qmlformat -i "$@"; else echo "qmlformat not found, skipping QML formatting"; fi'
        language: system
        files: \.qml$
        exclude: '^Generated/.*'

  # CMake formatting
  - repo: https://github.com/cheshirekow/cmake-format-precommit
    rev: v0.6.13
    hooks:
      - id: cmake-format
        args: [--in-place]
        files: (CMakeLists\.txt|\.cmake)$
        exclude: '^Generated/.*'

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: '^Generated/.*'

  # Git commit message formatting
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [optional-scope]

  # Additional checks for Qt/C++ projects
  - repo: local
    hooks:
      # Check for Qt best practices
      - id: qt-includes-check
        name: Qt Includes Check
        entry: bash
        args:
          - -c
          - |
            if grep -r "#include <Q.*\.h>" src/ main.cpp 2>/dev/null; then
              echo "Use Qt module includes instead of individual headers"
              exit 1
            fi
        language: system
        files: \.(cpp|h|hpp)$
        exclude: '^Generated/.*'
        pass_filenames: false

      # Check for proper Q_OBJECT macro usage
      - id: qobject-check
        name: Q_OBJECT Check
        entry: bash
        args:
          - -c
          - |
            find src/ main.cpp -name "*.h" -exec grep -l "public QObject\|: QObject" {} \; | \
            xargs grep -L "Q_OBJECT" | \
            if read file; then
              echo "Missing Q_OBJECT macro in QObject-derived classes: $file"
              exit 1
            fi
        language: system
        pass_filenames: false

      # Check for memory leaks (basic check for new without corresponding delete)
      - id: basic-memory-check
        name: Basic Memory Leak Check
        entry: bash
        args:
          - -c
          - |
            if git diff --cached --name-only | grep -E "\.(cpp|cc|cxx)$" | \
               xargs grep -n "new " | \
               grep -v "delete\|smart_ptr\|unique_ptr\|shared_ptr\|make_unique\|make_shared\|QObject"; then
              echo "Potential memory leak: use smart pointers or ensure proper cleanup"
              exit 1
            fi
        language: system
        pass_filenames: false

      # Check for proper header guards (though #pragma once is preferred)
      - id: header-guards
        name: Header Guards Check
        entry: bash
        args:
          - -c
          - |
            find src/ -name "*.h" | while read file; do
              if ! grep -q "#pragma once\|#ifndef.*_H" "$file"; then
                echo "Missing header guard in $file"
                exit 1
              fi
            done
        language: system
        pass_filenames: false

  # Documentation checks
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: ['--fix']
        exclude: '^Generated/.*'

# Additional configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
